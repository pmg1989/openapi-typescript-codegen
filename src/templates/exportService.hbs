{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}'
{{/each}}
{{/if}}
import { Injectable } from '@nestjs/common'
import { MicroService } from 'services/micro.service'
{{#if @root.useVersion}}
import { OpenAPI } from '../core/OpenAPI'
{{/if}}

@Injectable()
export class {{{name}}}{{{@root.postfix}}} extends MicroService {
    protected readonly baseUrl = this.configService.getRecycleURL()

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{escapeComment summary}}}
    {{/if}}
    {{#if description}}
     * {{{escapeComment description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#each results}}
     * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
    {{/each}}
     */

    async {{{name}}}({{>parameters parent=this}}) {
        return this.{{{method}}}<{{>result}}>(`{{{path}}}`,
            {{#if parametersQuery}}
            {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            {{#equals parametersBody.in 'formData'}}
            {{{parametersBody.name}}},
            {{/equals}}
            {{#equals parametersBody.in 'body'}}
            {{{parametersBody.name}}},
            {{/equals}}
            {{/if}}
        )}

    {{/each}}
}
